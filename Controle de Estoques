#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOME 50
#define ARQUIVO_ESTOQUE "estoque.txt"

typedef struct {
    char nome[MAX_NOME];
    int quantidade;
} ItemEstoque;

void adicionarItem() {
    FILE *arquivo;
    ItemEstoque novoItem;

    arquivo = fopen(ARQUIVO_ESTOQUE, "a");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo de estoque!\n");
        return;
    }

    printf("Digite o nome do item: ");
    scanf(" %[^\n]", novoItem.nome);

    printf("Digite a quantidade: ");
    if (scanf("%d", &novoItem.quantidade) != 1 || novoItem.quantidade < 0) {
        printf("Entrada inválida para quantidade.\n");
        fclose(arquivo);
        while (getchar() != '\n');
        return;
    }

    fprintf(arquivo, "%s\n", novoItem.nome);
    fprintf(arquivo, "%d\n", novoItem.quantidade);

    fclose(arquivo);
    printf("Item adicionado com sucesso!\n");
}

void removerItem() {
    FILE *arquivo, *tempArquivo;
    char nomeRemover[MAX_NOME];
    int quantidadeRemover;
    ItemEstoque itemAtual;
    int encontrado = 0;

    arquivo = fopen(ARQUIVO_ESTOQUE, "r");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo de estoque!\n");
        return;
    }

    tempArquivo = fopen("temp.txt", "w");
    if (tempArquivo == NULL) {
        printf("Erro ao criar arquivo temporário!\n");
        fclose(arquivo);
        return;
    }

    printf("Digite o nome do item: ");
    scanf(" %[^\n]", nomeRemover);
    printf("Digite a quantidade a ser removida: ");
    if (scanf("%d", &quantidadeRemover) != 1 || quantidadeRemover < 0) {
        printf("Entrada inválida para quantidade.\n");
        fclose(arquivo);
        fclose(tempArquivo);
        remove("temp.txt");
        while (getchar() != '\n');
        return;
    }

    while (fgets(itemAtual.nome, MAX_NOME, arquivo) != NULL) {
        itemAtual.nome[strcspn(itemAtual.nome, "\n")] = 0;
        if (fscanf(arquivo, "%d\n", &itemAtual.quantidade) == 1) {
            if (strcmp(itemAtual.nome, nomeRemover) == 0) {
                encontrado = 1;
                if (itemAtual.quantidade >= quantidadeRemover) {
                    itemAtual.quantidade -= quantidadeRemover;
                    if (itemAtual.quantidade > 0) {
                        fprintf(tempArquivo, "%s\n", itemAtual.nome);
                        fprintf(tempArquivo, "%d\n", itemAtual.quantidade);
                        printf("Quantidade atualizada com sucesso!\n");
                    } else {
                        printf("Item removido do estoque!\n");
                    }
                } else {
                    printf("Estoque insuficiente. Quantidade disponível: %d\n", itemAtual.quantidade);
                    fprintf(tempArquivo, "%s\n", itemAtual.nome);
                    fprintf(tempArquivo, "%d\n", itemAtual.quantidade);
                }
            } else {
                fprintf(tempArquivo, "%s\n", itemAtual.nome);
                fprintf(tempArquivo, "%d\n", itemAtual.quantidade);
            }
        } else {
            break;
        }
    }

    fclose(arquivo);
    fclose(tempArquivo);

    if (!encontrado) {
        printf("Item não encontrado.\n");
        remove("temp.txt");
    } else {
        remove(ARQUIVO_ESTOQUE);
        rename("temp.txt", ARQUIVO_ESTOQUE);
    }
}

void listarEstoque() {
    FILE *arquivo;
    ItemEstoque item;
    int estoqueVazio = 1;

    arquivo = fopen(ARQUIVO_ESTOQUE, "r");
    if (arquivo == NULL) {
        printf("\n=============================\n");
        printf("        Estoque Atual\n");
        printf("=============================\n");
        printf("O estoque está vazio.\n");
        return;
    }

    printf("\n=============================\n");
    printf("        Estoque Atual\n");
    printf("=============================\n");

    while (fgets(item.nome, MAX_NOME, arquivo) != NULL) {
        item.nome[strcspn(item.nome, "\n")] = 0;
        if (fscanf(arquivo, "%d\n", &item.quantidade) == 1) {
            printf("Nome: %s\n", item.nome);
            printf("Quantidade: %d\n\n", item.quantidade);
            estoqueVazio = 0;
        } else {
            printf("Erro ao ler dados do arquivo.\n");
            break;
        }
    }

    fclose(arquivo);

    if (estoqueVazio) {
        printf("O estoque está vazio.\n");
    }
    printf("=============================\n");
}

int main() {
    int opcao;
    char continuar;

    do {
        printf("\n==================================\n");
        printf("        Controle de Estoque\n");
        printf("==================================\n");
        printf("Selecione uma opção:\n");
        printf("1. Adicionar Item\n");
        printf("2. Remover Item\n");
        printf("3. Listar Estoque\n");
        printf("4. Sair\n");
        printf("Opção: ");

        if (scanf("%d", &opcao) != 1) {
            printf("Opção inválida! Tente novamente.\n");
            while (getchar() != '\n');
            continuar = 's';
            continue;
        }

        switch (opcao) {
            case 1:
                adicionarItem();
                break;
            case 2:
                removerItem();
                break;
            case 3:
                listarEstoque();
                break;
            case 4:
                printf("Obrigado por usar o Controle de Estoques! Até a próxima.\n");
                continuar = 'n';
                break;
            default:
                printf("Opção inválida! Tente novamente.\n");
                continuar = 's';
        }

        if (opcao != 4) {
            printf("\nDeseja realizar outra operação? (s/n): ");
            scanf(" %c", &continuar);
            while (getchar() != '\n');
        }

    } while (continuar == 's' || continuar == 'S');

    return 0;
}
